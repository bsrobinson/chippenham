; Global settings never change
UseArticles = 1
NewStyle = 1
MainMenuTable = 1

; Festival
FestName = 
ShortName = 
FestBankAdr = "Name of Bank"
FestBankSortCode = 12-34-56
FestBankAccountNum = 12345678
FestLegalName = Chippenham Folk Festival CIC
FestLegalAddr[] = The Cause Music and Arts Centre
FestLegalAddr[] = The Causeway
FestLegalAddr[] = Chippenham
FestLegalAddr[] = Wiltshire
FestLegalAddr[] = SN15 3DD
FestPhone = 
FestHomeName = Chippenham
PlanYear = 2025
ShowYear = 2025
HostURL = 
FestCompanyNumber = 9499889

; Trade & Finance
AutoInvoices = 1
PaymentTerms = 30 ; Days to pay an invoice
TradeInvoicePay = 0 ;  0 Invoices, 1 paycodes
CopyTradeEmailsTo = Treasurer
CopyTradeEmailsName = 
TradeDateChange = 0
LogAllTrade = 0
NeedSageCode = 0
PayByCheque = 2; 0 = No, 1 = Yes, 2 = Last Year
TradeBID = 0
TradeChamberCommerce = 0
TradeStatus = 1
TradePower = 1
SendTradeEmailFrom = Trade
InvoiceBanner = /images/icons/folk_logo_2242x1117.png
TradeExtras = 1
TableCost = 8
TradeBaseMap = 16
TradeOrg = Laura
TradeLastWeek = 15 ; Days after quote the button appears
TradeUnQuote = 8 ; Days after Last Week the button appears
TraderPasses = 1
TradeCarpark = 1
TradeCamping = 1


; Dance
DanceComp = 0
DanceDefaultSlot = 45
DanceGridSlot = 45
DanceDefaultPerSlot = 3
Procession = Parade ; What it is called Procession or Parade or ...
ProcessDays = 10; Bit map of days 1=Fri, 2=Sat, 4=Sun, 8 = Mon
DanceNeedInsurance = 1
DanceNeedPerformers = 
DanceNeedAddress = 
DanceNeedMobile = 
DanceNeedDays = 
DanceOrg = Dance Team
DanceSpecialMessage = Link Error
AllDanceTimes = 0
RestrictOneProcession = 1 ; If set allow only one

; Music and other types

DayTicket1 = 1 ; Sat
DayTicket2 = 1 ;
DayTicket3 = 1 ; Mon
NeedBandMembers = 1

; Volunteers
VolDBS = 1
VolFirstAid = 0
Vol_Children = 1
Vol_Camping = 1
VolPhoto = 0 ; 1 = may, 2 = Must
VolPromptsCC =  ;list of email addresses to be CCd on reminder emails
VolPromptDays = 14 ; Days that an application has before prompts get sent to team leader(s)
Vol_Special_Mess = 
Vol_Special_Mess2 = 
VolAgain = M,Vol_March

; Maps 
MapLat = 51.46017
MapLong = -2.11478
MapStartZoom = 16
DefaultDirLat = 51.45925
DefaultDirLong = -2.11694
DirectionDefault = Bridge
GoogleAPI = 
FoodCenter = 78 ; Map center -ve Mappoint, +ve Venue

; Social Media
Twitter = chippfolk
Facebook = chippfolk
Instagram = chippfolk
YouTube = channel/UCIYtKQPRs4tvLiBKcmfj86g
OctopusAPI = f4c661d8-5a34-4f0a-9878-93ac38613ffd
MailListName = "Richards Test List"
MailListID = 2318ea2c-8abf-11ee-be41-eb2778de7481
MailListMgrEmail = talk@chippfolk.co.uk
MailListProps = 6

; Other Things

; Camping style: 0 No Camp,1 Set by Perf,2 Set by Fest, 3 = chip
CampControl = 3

; Email - If no domain fest url added, if USER then user's email is used
EmailReplyTo = No-Reply@example.com ; Default
DanceEmailsFrom = Displays
MusicEmailsFrom = concerts
FamilyEmailsFrom = Family.Festival
CeilidhEmailsFrom = USER
OtherEmailsFrom = USER
FestContractEmail = Bookkeeper@Chippfolk.co.uk
SMTPuser = 
SMTPpwd = 
EmailButtons = 0
SpecialMessage = Scam_Emails


; Layout
FooterBack = Black
PaperColouredEvents = BlackDayTab
PerformerBanners = 0
FreeText = Donation
NoEventsPre = "We are working on announcements for"
NoEventsPost = "<br>Please check our social media sites for the very latest news. Thanks"
ShowContactPhotos = 1
WebsiteBanner = /images/icons/DefaultLogo.png
WebsiteBanner2 = /images/icons/DefaultLogo.png
DefaultPageBanner = /images/icons/ChipBan1440.png
LookBackYears = 5
SponsorTime = 1000
PerformerPairsExtra = 2,2,1,2,2,5
CSSColourMain = Fuchsia
CSSColourPrivate = lime
CSSColourNavButton = Green

; Contracts
DefaultReport = Artists Reception
DefaultReportPoint = -34
ContractType = Chip2023
PublicLiability = 1
PerfTickets = 2
PerformerTickets = Chip


; Other things

RealFaviconGeneratorKey = f37486a840ed5befdbe6934c876387a419cad120
MailChimp_apikey = 
MailChimp_listid = 
MailChimp_server = 
NotAllPublic = 0 ; Set to 1 to display warning that not all events public
Donate = 1
NewPhotos = 1
SpecialInvite = 1
CollectingPosn = 10


